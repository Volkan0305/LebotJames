% Initialize the LinearUR5 robot at the origin
ur5BaseTr = transl(0, 0, 0); % LinearUR5 placed at the origin
ur5Robot = LinearUR5(ur5BaseTr); % Create instance of LinearUR5

% Initialize the KUKA robot at a different starting position (e.g., x = 1, y = 1, z = 0)
kukaBaseTr = transl(1, 1, 0); % Place the KUKA robot at (x, y, z) = (1, 1, 0)
kukaRobot = KUKA(kukaBaseTr); % Create instance of KUKA with the new base position

% Plot the environment and robots
figureHandle = figure;
hold on;

% Create the floor and set texture as before
[X, Y] = meshgrid(-2:0.1:2, -2:0.1:2); % Create grid for the floor
Z = zeros(size(X)); % Flat floor
floorTexture = imread('concrete.jpg'); % Load floor texture
surf(X, Y, Z, 'CData', floorTexture, 'FaceColor', 'texturemap', 'EdgeColor', 'none'); % Apply texture
axis([-2 3 -2 2 0 2]); % Adjust axis to include both robots
view(3);

% Plot the LinearUR5 robot
ur5Robot.PlotAndColourRobot();

% Plot the KUKA robot (scaled to 0.009 to reduce size slightly)
kukaRobot.PlotAndColourRobot(0.006);

% Set initial joint angles to have the UR5 arm laid down (joint angles in radians)
initialAngles = [0, -pi/2, pi/2, 0, 0, pi/2, 0]; % Include prismatic joint (1st value) and 6 revolute joints

% Set final joint angles for UR5 to upright position
finalAngles = [0, -pi/2, pi/9, 0, 0, pi/2, 0]; % Include prismatic joint (1st value) and 6 revolute joints

% Number of steps for the trajectory
steps = 100;

% Generate trajectory between initial and final angles
qMatrix = jtraj(initialAngles, finalAngles, steps);

% Animate the UR5 robot's movement from laid-down to upright position
for i = 1:steps
    ur5Robot.model.animate(qMatrix(i, :)); % Use animate to update UR5 robot's configuration
    pause(0.1); % Slow down the animation
end

% After the UR5 robot stops, simulate the ball trajectory
% Initial parameters for ball launch
x0 = ur5Robot.model.fkine(finalAngles).t(1); % Initial X position of the ball (end-effector X position)
y0 = ur5Robot.model.fkine(finalAngles).t(2); % Initial Y position of the ball (end-effector Y position)
z0 = ur5Robot.model.fkine(finalAngles).t(3); % Initial Z position of the ball (end-effector Z position)

v0 = 20; % Initial velocity (m/s)
theta = pi;  % Horizontal launch angle (180 degrees for opposite direction)
phi = pi/4; % Vertical launch angle (45 degrees for a typical throw)
g = 9.81; % Gravity (m/s^2)

% Time parameters
t_end = 2; % Time until the ball hits the ground (approximate)
timeSteps = linspace(0, t_end, 200); % Increase number of time steps for smoother animation

% Preallocate arrays for storing the trajectory
x_traj = zeros(size(timeSteps));
y_traj = zeros(size(timeSteps)); % y_traj will remain constant if theta = pi
z_traj = zeros(size(timeSteps));

% Read the STL file and define scaling factor
fv = stlread('BasketTopu.stl'); 
scaling_factor = 0.001; % Scaling down the basketball geometry
scaled_vertices = fv.Points * scaling_factor; % Scale the vertices

% Initialize patch object for the STL ball
hBall = patch('Faces', fv.ConnectivityList, 'Vertices', scaled_vertices, ...
      'FaceColor', [0.8 0.8 1.0], 'EdgeColor', 'none'); % Patch object for basketball
     
% Set initial position of the ball to be at the end-effector
ballPosition = transl(x0, y0, z0);

% Loop to calculate and update the ball's trajectory
for i = 1:length(timeSteps)
    t = timeSteps(i);
    x_traj(i) = x0 + v0 * t * cos(theta) * cos(phi); % Moves along negative X-axis with theta = pi
    y_traj(i) = y0; % Constant since theta = pi, no movement along Y-axis
    z_traj(i) = z0 + v0 * t * sin(phi) - 0.5 * g * t^2; % Z-axis movement with gravity
    
    % Stop if the ball hits the ground
    if z_traj(i) < 0
        x_traj = x_traj(1:i);
        y_traj = y_traj(1:i);
        z_traj = z_traj(1:i);
        break;
    end
    
    % Update the basketball's position based on the calculated trajectory
    ballPosition = transl(x_traj(i), y_traj(i), z_traj(i)); % Update the transformation matrix
    new_vertices = (ballPosition(1:3, 1:3) * scaled_vertices')' + ballPosition(1:3, 4)'; % Apply translation and rotation
    set(hBall, 'Vertices', new_vertices); % Update ball position in the plot
    
    pause(0.005); % Smaller pause for quicker and smoother movement
end

% Plot the final trajectory of the ball
plot3(x_traj, y_traj, z_traj, 'r-', 'LineWidth', 2); % Plot in 3D space
xlabel('X');
ylabel('Y');
zlabel('Z');
title('Ball Trajectory with STL Object');
grid on;

% Ensure figure remains open after the animation
hold off;
