%% Initialize Environment, UR5, and Omron Robots
clear; clc; close all;

% Initialize UR5 robot at the origin with base transformation
ur5BaseTr = transl(0.5, 0.5, 0);  % Base at origin
ur5Robot = LinearUR5(ur5BaseTr);  % Create instance of the LinearUR5 robot

% Initialize Omron robot at a shifted location
omronBaseTr = transl(1, 0, 0.5);  % Omron shifted along X-axis
omronRobot = Omron(omronBaseTr);  % Create instance of the Omron robot

%% Set the Desired Starting Position for the UR5 Robot
initialJointAnglesUR5 = [0, 0, -pi/2, 0, pi/2, pi/2, pi/2, pi];  % 8 joint values

% Plot the UR5 robot in the initial position
ur5Robot.model.plot(initialJointAnglesUR5);

%% Load and Plot the Ball (STL file)
ballPosition = transl(1.2, -0.5, 0.1);  % Ball initial position
ball = stlread('BasketTopu.stl');  % Load STL file
ballVertices = ball.Points * 0.0008;  % Scale vertices
ballFaces = ball.ConnectivityList;

% Plot the ball in the scene
hold on;
ballHandle = patch('Faces', ballFaces, 'Vertices', ballVertices + ballPosition(1:3, 4)', ...
    'FaceVertexCData', repmat([0.8, 0.3, 0.3], size(ballVertices, 1), 1), ...
    'FaceColor', 'flat', 'EdgeColor', 'none');

% Load and Plot the Basket (STL file)
basketPosition = transl(0, 4, 0.0);  % Set the position for the basket
basket = stlread('basket.stl');  % Load STL file for the basket
basketVertices = basket.Points * 0.001;  % Scale down if necessary
basketFaces = basket.ConnectivityList;

% Plot the basket in the scene
hold on;
basketHandle = patch('Faces', basketFaces, 'Vertices', basketVertices + basketPosition(1:3, 4)', ...
    'FaceVertexCData', repmat([0.7, 0.7, 0.7], size(basketVertices, 1), 1), ...  % Set a gray color for the basket
    'FaceColor', 'flat', 'EdgeColor', 'none');


%% Set up Floor Texture and Environment
[X, Y] = meshgrid(-5:0.1:5, -5:0.1:5);
Z = zeros(size(X));
floorTexture = imread('concrete.jpg');  
surf(X, Y, Z, 'CData', floorTexture, 'FaceColor', 'texturemap', 'EdgeColor', 'none');
axis([-5 5 -5 5 0 5]);  
view(3);

%% Plot Initial Robot Configurations
omronRobot.PlotAndColourRobot();


%% Calculate Target Pose and Perform IK for Omron Robot
targetPose = transl(1.1, -0.4, 0.2);  % Adjusted ball position
qCurrent = omronRobot.model.getpos();
q0 = zeros(1, omronRobot.model.n);  % Initial joint configuration

try
    targetJointAngles = omronRobot.model.ikine(targetPose, q0, [1 1 1 0 0 0]);
catch
    targetJointAngles = omronRobot.model.ikcon(targetPose, q0);
end

steps = 50;
trajectory = jtraj(qCurrent, targetJointAngles, steps);
for i = 1:steps
    omronRobot.model.animate(trajectory(i, :));
    drawnow;
end

if isvalid(ballHandle)
    delete(ballHandle);  
    disp('Ball has been removed.');
end

%% Lift the Omron Robot Up
liftPose = targetPose * transl(0, 0, 1);
liftJointAngles = omronRobot.model.ikcon(liftPose, targetJointAngles);
liftSteps = 30;
liftTrajectory = jtraj(targetJointAngles, liftJointAngles, liftSteps);

for i = 1:liftSteps
    omronRobot.model.animate(liftTrajectory(i, :));
    drawnow;
end


%% Rotate Omron's Joints Sequentially
finalLiftAngles = liftJointAngles;
finalLiftAngles(1) = finalLiftAngles(1) - deg2rad(90);  % Rotate first joint

rotationTrajectory = jtraj(liftJointAngles, finalLiftAngles, 20);
for i = 1:20
    omronRobot.model.animate(rotationTrajectory(i, :));
    drawnow;
end

%% Rotate the Fifth Joint by -45 Degrees
fifthJointRotationSteps = 20;  
fifthJointAngles = finalLiftAngles;  

fifthJointAngles(5) = fifthJointAngles(5) + deg2rad(-45);
fifthJointTrajectory = jtraj(finalLiftAngles, fifthJointAngles, fifthJointRotationSteps);

for i = 1:fifthJointRotationSteps
    omronRobot.model.animate(fifthJointTrajectory(i, :));
    drawnow;
end

%% Rotate the Third Joint by -20 Degrees
thirdJointRotationSteps = 20;  
thirdJointAngles = fifthJointAngles;  

thirdJointAngles(3) = thirdJointAngles(3) + deg2rad(-20);
thirdJointTrajectory = jtraj(fifthJointAngles, thirdJointAngles, thirdJointRotationSteps);

for i = 1:thirdJointRotationSteps
    omronRobot.model.animate(thirdJointTrajectory(i, :));
    drawnow;
end

%% Rotate the Second Link by 70 Degrees
secondLinkRotationSteps = 20;  
finalRotationAngles = thirdJointAngles;  

finalRotationAngles(2) = finalRotationAngles(2) + deg2rad(70);
secondLinkTrajectory = jtraj(thirdJointAngles, finalRotationAngles, secondLinkRotationSteps);

for i = 1:secondLinkRotationSteps
    omronRobot.model.animate(secondLinkTrajectory(i, :));
    drawnow;
end 



%% Rotate the Second Link by 70 Degrees
secondLinkRotationSteps = 20;  
finalRotationAngles = thirdJointAngles;  

finalRotationAngles(2) = finalRotationAngles(2) + deg2rad(-70);
secondLinkTrajectory = jtraj(thirdJointAngles, finalRotationAngles, secondLinkRotationSteps);

for i = 1:secondLinkRotationSteps
    omronRobot.model.animate(secondLinkTrajectory(i, :));
    drawnow;
end 


%% UR5 Launch Sequence - Moving to Upright Position
initialAngles = [0, 0, -pi/2, 0, pi/2, pi/2, pi/2, pi];  % 8 joint values
finalAngles = [0, 0, -pi/9, 0, pi/2, pi/2, pi/2, pi];    % 8 joint values

qMatrix = jtraj(initialAngles, finalAngles, 100);
for i = 1:100
    ur5Robot.model.animate(qMatrix(i, :));
    pause(0.05);
end



%% Ball Launch Simulation (Proper Forward Trajectory, Max Z = 3, Along Negative Y)
%% Ball Launch Simulation (Proper Forward Trajectory, Max Z = 3, Along Positive Y)
endEffectorPose = ur5Robot.model.fkine(finalAngles);
x0 = endEffectorPose.t(1);  % X-coordinate of the end effector
y0 = endEffectorPose.t(2);  % Y-coordinate of the end effector
z0 = endEffectorPose.t(3);  % Z-coordinate of the end effector

v0 = 8 / sqrt(2);  % Adjusted velocity to control trajectory length
theta = pi/6;  % Angle to create a smooth arc in the YZ plane (30 degrees)
phi = 0;  % Set to 0 to launch along the positive Y-axis (forward)
g = 9.81;  % Gravity constant

t_end = 2;  % Time span for the shot
timeSteps = linspace(0, t_end, 150);  % Smoother trajectory with more steps

scaled_vertices = ball.Points * 0.001;
hBall = patch('Faces', ball.ConnectivityList, 'Vertices', scaled_vertices, ...
    'FaceColor', [0.8 0.8 1.0], 'EdgeColor', 'none');

x_traj = zeros(size(timeSteps));
y_traj = zeros(size(timeSteps));
z_traj = zeros(size(timeSteps));

for i = 1:length(timeSteps)
    t = timeSteps(i);
    
    % Update positions using projectile motion equations for a forward arc
    x_traj(i) = x0;  % No movement along the X-axis (launch straight along YZ plane)
    y_traj(i) = y0 + v0 * t * cos(theta);  % Positive Y-axis trajectory (forward direction)
    z_traj(i) = z0 + v0 * t * sin(theta) - 0.5 * g * t^2;  % Z trajectory with gravity
    
    % Stop simulation if the ball hits the ground (Z < 0) or goes too high (Z > 3)
    if z_traj(i) < 0 || z_traj(i) > 3
        x_traj = x_traj(1:i);
        y_traj = y_traj(1:i);
        z_traj = z_traj(1:i);
        break;
    end

    % Update ball's position
    ballPosition = transl(x_traj(i), y_traj(i), z_traj(i));
    new_vertices = (ballPosition(1:3, 1:3) * scaled_vertices')' + ballPosition(1:3, 4)';
    set(hBall, 'Vertices', new_vertices);

    pause(0.005);  % Fast animation for better realism
end

% Plot trajectory curve
plot3(x_traj, y_traj, z_traj, 'r-', 'LineWidth', 2);
xlabel('X'); ylabel('Y'); zlabel('Z');
title('Forward Arc Ball Trajectory (Max Z = 3)');
grid on;

hold off;
