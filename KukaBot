classdef KUKA < RobotBaseClass
    %% KUKA LBR iiwa 7 R800 Robot Model with 8th Link

    properties(Access = public)
        plyFileNameStem = 'KUKA';
    end
    
    methods
        %% Constructor
        function self = KUKA(baseTr)
            self.CreateModel();  % Create the KUKA robot model
            
            if nargin < 1
                baseTr = eye(4);  % Default to identity matrix if no baseTr provided
            end
            
            % Ensure the base transformation matrix is 4x4
            assert(all(size(baseTr) == [4, 4]), 'baseTr must be a 4x4 matrix');
            
            % Initialize the model base and apply the transformation
            self.model.base = baseTr;  % Directly set the base transformation matrix
            
            % Call method to plot and color the robot with .ply files, scaled to 0.01
            self.PlotAndColourRobot(0.01);  % Scale factor of 0.01 (1%)
        end


        %% Create the robot model
        %% Create the robot model
function CreateModel(self)
            link(1) = Link('d', 0, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-180, 180]));
            
            % Joint 2 to 7: Revolute joints, adjust qlim to allow significant movement
            link(2) = Link('d', 0, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-360 360]));
            link(3) = Link('d', 0, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-360 360]));
            link(4) = Link('d', 0, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-360 360]));
            link(5) = Link('d', 0, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-360 360]));
            link(6) = Link('d', 0, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-360 360]));
            link(7) = Link('d', 0, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-360 360]));
            link(8) = Link('d', 1.25, 'a', 0, 'alpha', 0, 'qlim', deg2rad([-360 360]));  % End effector link


   % Adjusting joint limits in CreateModel method
            link(1).qlim = [-360 360]*pi/180;
            link(2).qlim = [-360 360]*pi/180;
            link(3).qlim = [-90 90]*pi/180;
            link(4).qlim = [-170 170]*pi/180;
            link(5).qlim = [-360 360]*pi/180;
            link(6).qlim = [-360 360]*pi/180;
            link(7).qlim = [-360 360]*pi/180;
            link(8).qlim = [-360 360]*pi/180;
    % Create a serial link object for the KUKA robot
    self.model = SerialLink(link, 'name', 'KUKA LBR iiwa 7 R800 with 8th link');
end



%% Plot and color robot (associate .ply files with links)
function PlotAndColourRobot(self, scaleFactor)
    % If no scale factor is provided, use a default value of 0.01 (1% of the original size)
    if nargin < 2
        scaleFactor = 0.01;  % Default scaling factor
    end

    % Debugging output: Confirm the scale factor
    disp(['Using scale factor: ', num2str(scaleFactor)]);

    for linkIndex = 1:8  % Adjusted for 8 links
        % Load the .ply file corresponding to each link
        try
            [faceData, vertexData, plyData{linkIndex}] = plyread(['kukaLink', num2str(linkIndex), '.ply'], 'tri');
        catch
            error(['Error loading .ply file for link ', num2str(linkIndex)]);
        end
        
        % Debugging: Output the number of vertices
        disp(['Loaded kukaLink', num2str(linkIndex), '.ply with ', num2str(size(vertexData, 1)), ' vertices.']);
        
        % Scale the vertex data down by the scale factor
        vertexData = vertexData * scaleFactor;
        
        % Remove the rotation for link 5
        % No rotation applied here
        
        % Attach the scaled 3D data to the robot model
        self.model.faces{linkIndex + 1} = faceData;
        self.model.points{linkIndex + 1} = vertexData;
    end

    % Adjust the workspace to fit the scaled model
    workspaceDimensions = [-5 5 -5 5 0 5];  % Increased Z-axis limit to fit better

    % Plot the robot in 3D with the scaled model and adjusted workspace
    self.model.plot3d(zeros(1, self.model.n), 'noarrow', 'workspace', workspaceDimensions);
    drawnow;  % Force the plot to update

    % Add lighting if it's not already present
    if isempty(findobj(get(gca, 'Children'), 'Type', 'Light'))
        camlight;
    end
    self.model.delay = 0;
end
    end 
end 
